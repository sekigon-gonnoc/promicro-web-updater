{"version":3,"sources":["src/webSerial.ts","src/mcu.ts","src/caterina.ts","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/isarray/index.js","node_modules/buffer/index.js","node_modules/intel-hex/index.js","src/index.js"],"names":["caterina","CaterinaBootloader","ihex","require","firmHex","bootloader","progress","document","getElementById","initProgress","str","innerHTML","console","log","updateProgress","length","loadEepromHex","eepromOption","eeprom","value","hex","fetch","then","r","text","parse","Uint8Array","data","readFirmware","firm","read","blob","Blob","a","href","URL","createObjectURL","type","click","e","error","fileUpload","files","fname","name","reader","FileReader","addEventListener","result","toString","readAsText","verifyFirmware","verify","flashFirmware","eep","write","navigator","serial","onclick","innerText"],"mappings":"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","file":"src.e9d5a79a.js","sourceRoot":"..","sourcesContent":["class WebSerial {\n  private receiveCallback: ((msg: Uint8Array) => void) | null = null;\n  private closeCallback: (() => void) | null = null;\n  private errorCallback: ((e: Error) => void) | null = null;\n\n  private port: SerialPort | null = null;\n  private writable: WritableStream | null = null;\n  private reader: ReadableStreamDefaultReader | null = null;\n\n  private _connected: boolean = false;\n  private _readloopRunning: boolean = false;\n  get connected() {\n    return this._connected;\n  }\n\n  constructor(\n    private send_chunk: number = 64,\n    private send_interval: number = 30\n  ) {}\n\n  setReceiveCallback(recvHandler: ((msg: Uint8Array) => void) | null) {\n    this.receiveCallback = recvHandler;\n  }\n  setErrorCallback(handler: (e: Error) => void | null) {\n    this.errorCallback = handler;\n  }\n  setCloseCallback(handler: () => void | null) {\n    this.errorCallback = handler;\n  }\n\n  async open(onConnect: () => void | null, baudrate: number = 115200) {\n    this.port = await navigator.serial.requestPort();\n\n    try {\n      await this.port.open({ baudRate: baudrate, buffersize: 81920 });\n    } catch (e) {\n      await this.port.close();\n      return Promise.reject(e);\n    }\n\n    this._connected = true;\n    this._readloopRunning = false;\n\n    if (onConnect) {\n      onConnect();\n    }\n\n    // this.readLoop();\n\n    this.writable = this.port.writable;\n    console.log(\"open serial port\");\n  }\n\n  async startReadLoop() {\n    this.readLoop();\n    await this.sleep(1000);\n  }\n\n  private async readLoop() {\n    if (this.port == null) {\n      console.error(\"failed to read from serial port\");\n      return;\n    }\n\n    try {\n      this.reader = this.port.readable.getReader();\n      console.log(\"start read loop\");\n      for (;;) {\n        const { done, value } = await this.reader.read();\n\n        if (value) {\n          // console.log(`serial received: ${value.byteLength}byte`);\n\n          if (this.receiveCallback) {\n            this.receiveCallback(value);\n          }\n        }\n\n        if (done) {\n          console.log(\"Web serial read complete\", done);\n          if (this.reader) {\n            this.reader.releaseLock();\n          }\n\n          this._readloopRunning = false;\n\n          break;\n        }\n      }\n    } catch (e) {\n      this._readloopRunning = false;\n      console.error(e);\n      if (this.errorCallback) {\n        this.errorCallback(e);\n      }\n\n      await this.close();\n    }\n  }\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  async writeString(msg: string) {\n    await this.write(new TextEncoder().encode(msg));\n  }\n\n  async write(msg: Uint8Array) {\n    if (this.writable == null) {\n      console.error(\"Serial wrie is unavailable\");\n      return;\n    }\n\n    const writer = this.writable.getWriter();\n\n    for (let index = 0; index < msg.length; index += this.send_chunk) {\n      // console.log(\"serial send:\", msg.slice(index, index + this.send_chunk));\n      await writer.write(msg.slice(index, index + this.send_chunk));\n      await this.sleep(this.send_interval);\n    }\n\n    writer.releaseLock();\n  }\n\n  async close() {\n    if (this.reader) {\n      try {\n        await this.reader.cancel();\n        this.reader.releaseLock();\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.reader = null;\n      }\n    }\n\n    if (this.writable) {\n      // this.writable.abort();\n      this.writable = null;\n    }\n\n    if (this.closeCallback) {\n      this.closeCallback();\n    }\n\n    if (this.port) {\n      try {\n        await this.port.close();\n        this.port = null;\n        this._connected = false;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    console.log(\"serial port closed\");\n  }\n}\n\nexport { WebSerial };\n","type Mcu = {\n  signature: number;\n  flashSize: number;\n  eepromSize: number;\n  bootAddr: number;\n};\n\nconst ATMEGA32U4: Mcu = {\n  signature: 0x1e9587,\n  flashSize: 32768,\n  eepromSize: 1024,\n  bootAddr: 0x7000,\n};\n\nconst MCU = { atmega32u4: ATMEGA32U4 };\n\nexport { Mcu, MCU };\n","import { WebSerial } from \"./webSerial\";\nimport { Mcu, MCU } from \"./mcu\";\n\ntype FlashType = \"flash\" | \"eeprom\";\n\nclass CaterinaBootloader {\n  private comReceiveBuffer: number[] = [];\n  private bufferSize: number;\n  private com: WebSerial;\n  private mcu: Mcu;\n\n  private dumpHex(arr: number[]): string {\n    return arr\n      .map((v) => {\n        return v.toString(16);\n      })\n      .join(\" \");\n  }\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  private receiveResponse(arr: Uint8Array) {\n    this.comReceiveBuffer = this.comReceiveBuffer.concat(Array.from(arr));\n  }\n\n  private async readResponse(size: number, timeout: number): Promise<number[]> {\n    let cnt = 0;\n    while (this.comReceiveBuffer.length < size && cnt < timeout) {\n      await this.sleep(1);\n      cnt += 1;\n    }\n\n    if (cnt >= timeout) {\n      return Promise.reject(new Error(\"Serial receive timeout\"));\n    }\n\n    let ret = this.comReceiveBuffer.slice(0, size);\n    this.comReceiveBuffer = this.comReceiveBuffer.slice(size);\n\n    return ret;\n  }\n\n  private async verifyCommandSent(timeout: number = 1000) {\n    let ret = await this.readResponse(1, timeout);\n    if (ret[0] != \"\\r\".charCodeAt(0)) {\n      return Promise.reject(new Error(`Command failed. res:${ret[0]}`));\n    }\n  }\n\n  private async detect(): Promise<boolean> {\n    let ret: number[];\n\n    await this.com.writeString(\"S\");\n    ret = await this.readResponse(7, 1000);\n\n    let bl_string = new TextDecoder().decode(Uint8Array.from(ret));\n    console.log(`Bootloader:${bl_string}`);\n\n    if (bl_string !== \"CATERIN\") {\n      return false;\n    }\n\n    await this.com.writeString(\"V\");\n    let sw_ver = await this.readResponse(2, 1000);\n    console.log(`Software version:${sw_ver[0] - 0x30}.${sw_ver[1] - 0x30}`);\n\n    await this.com.writeString(\"v\");\n    let hw_ver = await this.readResponse(1, 1000);\n    if (hw_ver[0] != \"?\".charCodeAt(0)) {\n      hw_ver = hw_ver.concat(await this.readResponse(1, 1000));\n      console.log(`Hardware version:${hw_ver[0]}.${hw_ver[1]}`);\n    } else {\n      console.log(\"Unknown hardware version\");\n    }\n\n    await this.com.writeString(\"p\");\n    let pgm_type = await this.readResponse(1, 1000);\n    console.log(`Program type:${pgm_type}`);\n\n    await this.com.writeString(\"a\");\n    let auto_incr = (await this.readResponse(1, 1000)[0]) == \"Y\".charCodeAt[0];\n    console.log(`Auto address increment support:${auto_incr}`);\n\n    await this.com.writeString(\"b\");\n    let buffer_access =\n      (await this.readResponse(1, 1000)[0]) == \"Y\".charCodeAt[0];\n    if (!buffer_access) {\n      return false;\n    }\n    ret = await this.readResponse(2, 1000);\n    this.bufferSize = (ret[0] << 8) | ret[1];\n    console.log(`Buffer size:${this.bufferSize}`);\n\n    await this.com.writeString(\"t\");\n    ret = await this.readResponse(1, 1000);\n    let dev_type = ret;\n    console.log(`Device type:${dev_type}`);\n\n    do {\n      ret = await this.readResponse(1, 1000);\n    } while (ret[0] != 0);\n\n    await this.com.writeString(\"T\");\n    await this.com.write(Uint8Array.from(dev_type));\n    await this.verifyCommandSent();\n\n    let eb = await this.readEFuse();\n    let lb = await this.readLFuse();\n    let hb = await this.readHFuse();\n    let lock = await this.readLockBits();\n\n    console.log(\n      `Fuse: Lock:${lock.toString(16)} E:${eb.toString(16)} H:${hb.toString(\n        16\n      )} L:${lb.toString(16)}`\n    );\n\n    console.log(\"Valid caterina bootloader is found\");\n    return true;\n  }\n\n  private async readSignature(): Promise<number> {\n    await this.com.writeString(\"s\");\n    let signature_bytes = await this.readResponse(3, 1000);\n    let signature =\n      (signature_bytes[2] << 16) |\n      (signature_bytes[1] << 8) |\n      signature_bytes[0];\n    console.log(`Signature:0x${signature.toString(16)}`);\n    return signature;\n  }\n\n  private async setAddress(addr: number) {\n    let cmd = Array(3);\n    cmd[0] = \"A\".charCodeAt(0);\n    cmd[1] = addr >> 8;\n    cmd[2] = addr & 0xff;\n\n    await this.com.write(Uint8Array.from(cmd));\n    await this.verifyCommandSent();\n  }\n\n  private async readFlash(\n    len: number,\n    flashType: FlashType,\n    progress: (str: string) => void = () => {}\n  ): Promise<number[]> {\n    let cmd = Array(4);\n    let blockSize: number;\n    let block: number[];\n    let res = Array(0);\n    cmd[0] = \"g\".charCodeAt(0);\n\n    if (flashType == \"flash\") {\n      cmd[3] = \"F\".charCodeAt(0);\n      blockSize = this.bufferSize;\n    } else if (flashType == \"eeprom\") {\n      cmd[3] = \"E\".charCodeAt(0);\n      blockSize = 1;\n    }\n\n    let addr = 0;\n    await this.setAddress(addr);\n\n    while (addr < len) {\n      cmd[1] = blockSize >> 8;\n      cmd[2] = blockSize & 0xff;\n\n      await this.com.write(Uint8Array.from(cmd));\n      block = await this.readResponse(blockSize, 1000);\n\n      res = res.concat(Array.from(block));\n\n      addr += blockSize;\n\n      progress(\".\");\n    }\n\n    return res;\n  }\n\n  private async enterProgMode() {\n    await this.com.writeString(\"P\");\n    await this.verifyCommandSent();\n  }\n\n  private async leaveProgMode() {\n    await this.com.writeString(\"L\");\n    await this.verifyCommandSent();\n  }\n\n  private async eraseAll() {\n    await this.com.writeString(\"e\");\n    // Erase command takes ~5s\n    await this.verifyCommandSent(6000);\n  }\n\n  private async writeFlash(\n    bin: Uint8Array,\n    flashType: FlashType,\n    progress: (str: string) => void = () => {}\n  ) {\n    let blockSize: number;\n    let cmd = Array(4);\n    cmd[0] = \"B\".charCodeAt(0);\n\n    if (flashType == \"flash\") {\n      cmd[3] = \"F\".charCodeAt(0);\n      blockSize = this.bufferSize;\n    } else if (flashType == \"eeprom\") {\n      cmd[3] = \"E\".charCodeAt(0);\n      blockSize = 1;\n    }\n\n    let addr = 0;\n    await this.setAddress(addr);\n\n    this.comReceiveBuffer = [];\n\n    while (addr < bin.length) {\n      if (bin.length - addr < this.bufferSize) {\n        blockSize = bin.length - addr;\n      }\n      cmd[1] = blockSize >> 8;\n      cmd[2] = blockSize & 0xff;\n\n      await this.com.write(Uint8Array.from(cmd));\n      await this.com.write(bin.slice(addr, addr + blockSize));\n      await this.verifyCommandSent();\n\n      addr += blockSize;\n\n      progress(\".\");\n    }\n  }\n\n  private async exit() {\n    await this.com.writeString(\"E\");\n    await this.verifyCommandSent();\n  }\n\n  private async readLockBits(): Promise<number> {\n    await this.com.writeString(\"r\");\n    let ret = await this.readResponse(1, 1000);\n    return ret[0];\n  }\n\n  private async readEFuse(): Promise<number> {\n    await this.com.writeString(\"Q\");\n    let ret = await this.readResponse(1, 1000);\n    return ret[0];\n  }\n\n  private async readHFuse(): Promise<number> {\n    await this.com.writeString(\"N\");\n    let ret = await this.readResponse(1, 1000);\n    return ret[0];\n  }\n\n  private async readLFuse(): Promise<number> {\n    await this.com.writeString(\"F\");\n    let ret = await this.readResponse(1, 1000);\n    return ret[0];\n  }\n\n  private async verifyFlash(\n    bin: Uint8Array,\n    flashType: FlashType,\n    progress: (str: string) => void = (str) => {\n      console.log(str);\n    }\n  ) {\n    progress(`Verify ${flashType} ${bin.length} bytes...`);\n    let firm = await this.readFlash(bin.length, flashType, progress);\n    console.log(firm);\n    for (let idx = 0; idx < bin.length; idx++) {\n      if (bin[idx] != firm[idx]) {\n        progress(`Verify NG at address 0x${idx.toString(16)}`);\n        return Promise.reject(new Error(\"Verify failed\"));\n      }\n    }\n    progress(\"Verify OK.\");\n  }\n\n  private async openPort() {\n    this.com = new WebSerial(128, 5);\n    await this.com.open(null);\n    this.comReceiveBuffer = [];\n    this.com.startReadLoop();\n    this.com.setReceiveCallback(this.receiveResponse.bind(this));\n  }\n\n  private async initBootloader(\n    progress: (str: string) => void = (str) => {\n      console.log(str);\n    }\n  ) {\n    let isCaterin = await this.detect();\n    if (!isCaterin) {\n      progress(\"Caterina bootloader is not found\");\n    }\n    let signature = await this.readSignature();\n\n    if (signature == MCU.atmega32u4.signature) {\n      progress(\"atmega32u4 found.\");\n      this.mcu = MCU.atmega32u4;\n    } else {\n      progress(\"No flash config for this mcu\");\n\n      return Promise.reject(new Error(\"No flash config for this mcu\"));\n    }\n  }\n\n  async read(\n    size: number = 0,\n    progress: (str: string) => void = (str) => {\n      console.log(str);\n    }\n  ): Promise<Uint8Array> {\n    let firm: number[];\n\n    await this.openPort();\n\n    try {\n      await this.initBootloader(progress);\n\n      if (size == 0) {\n        size = this.mcu.flashSize;\n      }\n      size = Math.min(this.mcu.flashSize, size);\n\n      progress(`Reading ${size} bytes...`);\n      firm = await this.readFlash(size, \"flash\", progress);\n      progress(`Read complete`);\n\n      await this.exit();\n\n      console.log(firm);\n    } catch (e) {\n      progress(\"\\n\" + e.toString() + \"\\n\");\n      progress(\"Firm read failed\\n\");\n    } finally {\n      await this.com.close();\n    }\n\n    return Uint8Array.from(firm);\n  }\n\n  async write(\n    bin: Uint8Array,\n    eep: Uint8Array | null = null,\n    progress: (str: string) => void = (str) => {\n      console.log(str);\n    }\n  ) {\n    await this.openPort();\n\n    try {\n      await this.initBootloader(progress);\n\n      if (bin.length > this.mcu.bootAddr) {\n        return Promise.reject(\n          new Error(\n            `Binary image size exceeds limit ${bin.length}>${this.mcu.bootAddr}`\n          )\n        );\n      }\n\n      await this.enterProgMode();\n\n      progress(\"Erase all...\");\n      await this.eraseAll();\n      progress(\"Erase complete.\");\n\n      progress(`Flash ${bin.length} bytes...`);\n      await this.writeFlash(bin, \"flash\", progress);\n      progress(\"Flash complete.\");\n\n      await this.verifyFlash(bin, \"flash\", progress);\n\n      if (eep != null) {\n        if (eep.length > this.mcu.eepromSize) {\n          return Promise.reject(\n            new Error(\n              `EEPROM image size exceeds limit ${eep.length}>${this.mcu.eepromSize}`\n            )\n          );\n        }\n        progress(`Flash eeprom ${eep.length} bytes...`);\n        await this.writeFlash(eep, \"eeprom\", progress);\n        progress(\"Flash eeprom complete.\");\n\n        await this.verifyFlash(eep, \"eeprom\", progress);\n      }\n\n      await this.leaveProgMode();\n\n      await this.exit();\n    } catch (e) {\n      progress(\"\\n\" + e.toString() + \"\\n\");\n      progress(\"Firm read failed\\n\");\n    } finally {\n      await this.com.close();\n    }\n  }\n\n  async verify(\n    bin: Uint8Array,\n    progress: (str: string) => void = (str) => {\n      console.log(str);\n    }\n  ) {\n    await this.openPort();\n\n    try {\n      await this.initBootloader(progress);\n\n      if (bin.length > this.mcu.bootAddr) {\n        return Promise.reject(\n          new Error(\n            `Binary image size exceeds limit ${bin.length}>{mcu.bootAddr}`\n          )\n        );\n      }\n\n      await this.verifyFlash(bin, \"flash\", progress);\n      await this.exit();\n    } catch (e) {\n      progress(\"\\n\" + e.toString() + \"\\n\");\n      progress(\"Firm read failed\\n\");\n    } finally {\n      await this.com.close();\n    }\n  }\n}\n\nexport { CaterinaBootloader };\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","//Intel Hex record types\nconst DATA = 0,\n\tEND_OF_FILE = 1,\n\tEXT_SEGMENT_ADDR = 2,\n\tSTART_SEGMENT_ADDR = 3,\n\tEXT_LINEAR_ADDR = 4,\n\tSTART_LINEAR_ADDR = 5;\n\nconst EMPTY_VALUE = 0xFF;\n\n/* intel_hex.parse(data)\n\t`data` - Intel Hex file (string in ASCII format or Buffer Object)\n\t`bufferSize` - the size of the Buffer containing the data (optional)\n\t\n\treturns an Object with the following properties:\n\t\t- data - data as a Buffer Object, padded with 0xFF\n\t\t\twhere data is empty.\n\t\t- startSegmentAddress - the address provided by the last\n\t\t\tstart segment address record; null, if not given\n\t\t- startLinearAddress - the address provided by the last\n\t\t\tstart linear address record; null, if not given\n\tSpecial thanks to: http://en.wikipedia.org/wiki/Intel_HEX\n*/\nexports.parse = function parseIntelHex(data, bufferSize) {\n\tif(data instanceof Buffer)\n\t\tdata = data.toString(\"ascii\");\n\t//Initialization\n\tvar buf = Buffer.alloc(bufferSize || 8192),\n\t\tbufLength = 0, //Length of data in the buffer\n\t\thighAddress = 0, //upper address\n\t\tstartSegmentAddress = null,\n\t\tstartLinearAddress = null,\n\t\tlineNum = 0, //Line number in the Intel Hex string\n\t\tpos = 0; //Current position in the Intel Hex string\n\tconst SMALLEST_LINE = 11;\n\twhile(pos + SMALLEST_LINE <= data.length)\n\t{\n\t\t//Parse an entire line\n\t\tif(data.charAt(pos++) != \":\")\n\t\t\tthrow new Error(\"Line \" + (lineNum+1) +\n\t\t\t\t\" does not start with a colon (:).\");\n\t\telse\n\t\t\tlineNum++;\n\t\t//Number of bytes (hex digit pairs) in the data field\n\t\tvar dataLength = parseInt(data.substr(pos, 2), 16);\n\t\tpos += 2;\n\t\t//Get 16-bit address (big-endian)\n\t\tvar lowAddress = parseInt(data.substr(pos, 4), 16);\n\t\tpos += 4;\n\t\t//Record type\n\t\tvar recordType = parseInt(data.substr(pos, 2), 16);\n\t\tpos += 2;\n\t\t//Data field (hex-encoded string)\n\t\tvar dataField = data.substr(pos, dataLength * 2),\n\t\t\tdataFieldBuf = Buffer.from(dataField, \"hex\");\n\t\tpos += dataLength * 2;\n\t\t//Checksum\n\t\tvar checksum = parseInt(data.substr(pos, 2), 16);\n\t\tpos += 2;\n\t\t//Validate checksum\n\t\tvar calcChecksum = (dataLength + (lowAddress >> 8) +\n\t\t\tlowAddress + recordType) & 0xFF;\n\t\tfor(var i = 0; i < dataLength; i++)\n\t\t\tcalcChecksum = (calcChecksum + dataFieldBuf[i]) & 0xFF;\n\t\tcalcChecksum = (0x100 - calcChecksum) & 0xFF;\n\t\tif(checksum != calcChecksum)\n\t\t\tthrow new Error(\"Invalid checksum on line \" + lineNum +\n\t\t\t\t\": got \" + checksum + \", but expected \" + calcChecksum);\n\t\t//Parse the record based on its recordType\n\t\tswitch(recordType)\n\t\t{\n\t\t\tcase DATA:\n\t\t\t\tvar absoluteAddress = highAddress + lowAddress;\n\t\t\t\t//Expand buf, if necessary\n\t\t\t\tif(absoluteAddress + dataLength >= buf.length)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = Buffer.alloc((absoluteAddress + dataLength) * 2);\n\t\t\t\t\tbuf.copy(tmp, 0, 0, bufLength);\n\t\t\t\t\tbuf = tmp;\n\t\t\t\t}\n\t\t\t\t//Write over skipped bytes with EMPTY_VALUE\n\t\t\t\tif(absoluteAddress > bufLength)\n\t\t\t\t\tbuf.fill(EMPTY_VALUE, bufLength, absoluteAddress);\n\t\t\t\t//Write the dataFieldBuf to buf\n\t\t\t\tdataFieldBuf.copy(buf, absoluteAddress);\n\t\t\t\tbufLength = Math.max(bufLength, absoluteAddress + dataLength);\n\t\t\t\tbreak;\n\t\t\tcase END_OF_FILE:\n\t\t\t\tif(dataLength != 0)\n\t\t\t\t\tthrow new Error(\"Invalid EOF record on line \" +\n\t\t\t\t\t\tlineNum + \".\");\n\t\t\t\treturn {\n\t\t\t\t\t\"data\": buf.slice(0, bufLength),\n\t\t\t\t\t\"startSegmentAddress\": startSegmentAddress,\n\t\t\t\t\t\"startLinearAddress\": startLinearAddress\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase EXT_SEGMENT_ADDR:\n\t\t\t\tif(dataLength != 2 || lowAddress != 0)\n\t\t\t\t\tthrow new Error(\"Invalid extended segment address record on line \" +\n\t\t\t\t\t\tlineNum + \".\");\n\t\t\t\thighAddress = parseInt(dataField, 16) << 4;\n\t\t\t\tbreak;\n\t\t\tcase START_SEGMENT_ADDR:\n\t\t\t\tif(dataLength != 4 || lowAddress != 0)\n\t\t\t\t\tthrow new Error(\"Invalid start segment address record on line \" +\n\t\t\t\t\t\tlineNum + \".\");\n\t\t\t\tstartSegmentAddress = parseInt(dataField, 16);\n\t\t\t\tbreak;\n\t\t\tcase EXT_LINEAR_ADDR:\n\t\t\t\tif(dataLength != 2 || lowAddress != 0)\n\t\t\t\t\tthrow new Error(\"Invalid extended linear address record on line \" +\n\t\t\t\t\t\tlineNum + \".\");\n\t\t\t\thighAddress = parseInt(dataField, 16) << 16;\n\t\t\t\tbreak;\n\t\t\tcase START_LINEAR_ADDR:\n\t\t\t\tif(dataLength != 4 || lowAddress != 0)\n\t\t\t\t\tthrow new Error(\"Invalid start linear address record on line \" +\n\t\t\t\t\t\tlineNum + \".\");\n\t\t\t\tstartLinearAddress = parseInt(dataField, 16);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid record type (\" + recordType +\n\t\t\t\t\t\") on line \" + lineNum);\n\t\t\t\tbreak;\n\t\t}\n\t\t//Advance to the next line\n\t\tif(data.charAt(pos) == \"\\r\")\n\t\t\tpos++;\n\t\tif(data.charAt(pos) == \"\\n\")\n\t\t\tpos++;\n\t}\n\tthrow new Error(\"Unexpected end of input: missing or invalid EOF record.\");\n};\n","import { CaterinaBootloader } from \"./caterina\";\n\nconst caterina = new CaterinaBootloader();\nconst ihex = require(\"intel-hex\");\nlet firmHex = null;\n\nlet bootloader = caterina;\n\nlet progress = document.getElementById(\"progress\");\nfunction initProgress(str) {\n  progress.innerHTML = str + \"\\n\";\n  console.log(str);\n}\n\nfunction updateProgress(str) {\n  if (str.length == 1) {\n    progress.innerHTML += str;\n  } else {\n    progress.innerHTML += str + \"\\n\";\n  }\n  console.log(str);\n}\n\nif (!navigator.serial) {\n  initProgress(\n    \"Web serial is unavailable.\\nPlease use Google Chrome or Chromium Edge\\n\"\n  );\n  console.error(\"Web serial is unavailable\");\n}\n\nasync function loadEepromHex() {\n  let eepromOption = document.getElementById(\"eeprom\");\n  if (eepromOption.eeprom.value === \"none\") {\n    return null;\n  } else if (eepromOption.eeprom.value === \"split-left\") {\n    let hex = await fetch(\"./eeprom-lefthand.eep\").then((r) => {\n      return r.text();\n    });\n    console.log(ihex.parse(hex));\n    return new Uint8Array(ihex.parse(hex).data);\n  } else if (eepromOption.eeprom.value === \"split-right\") {\n    let hex = await fetch(\"./eeprom-righthand.eep\").then((r) => {\n      return r.text();\n    });\n    console.log(ihex.parse(hex));\n    return new Uint8Array(ihex.parse(hex).data);\n  }\n}\n\nasync function readFirmware() {\n  initProgress(\"Reset Pro Micro and choose serial port appeared.\");\n  try {\n    let firm = await bootloader.read(0, updateProgress);\n    let blob = new Blob([firm]);\n    let a = document.getElementById(\"download-file\");\n    a.href = URL.createObjectURL(blob, { type: \"application/octet-binary\" });\n    a.click();\n  } catch (e) {\n    console.error(e);\n  }\n}\n\ndocument\n  .getElementById(\"upload-file\")\n  .addEventListener(\"change\", fileUpload, false);\nfunction fileUpload() {\n  console.log(this.files);\n  firmHex = null;\n  if (this.files.length > 0) {\n    console.log(this.files[0]);\n    let fname = this.files[0].name;\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      function () {\n        try {\n          firmHex = ihex.parse(reader.result);\n          console.log(firmHex);\n          initProgress(\n            `Firmware opened: ${fname}(${firmHex.data.length} bytes)`\n          );\n        } catch (e) {\n          console.error(e);\n          initProgress(`Firmware open failed: ${e.toString()}`);\n          firmHex = null;\n        }\n      },\n      false\n    );\n    reader.readAsText(this.files[0]);\n  }\n}\n\nasync function verifyFirmware() {\n  if (firmHex == null) {\n    initProgress(\"Please upload firmware at first.\");\n    return;\n  } else {\n    initProgress(\"Reset Pro Micro and choose serial port appeared.\");\n  }\n\n  try {\n    await bootloader.verify(firmHex.data, updateProgress);\n  } catch (e) {\n    console.error(e);\n    updateProgress(e.toString());\n  }\n}\n\nasync function flashFirmware() {\n  if (firmHex == null) {\n    initProgress(\"Please upload firmware at first.\");\n    return;\n  } else {\n    initProgress(\"Reset Pro Micro and choose serial port appeared.\");\n  }\n\n  let eep = await loadEepromHex();\n\n  try {\n    await bootloader.write(firmHex.data, eep, updateProgress);\n  } catch (e) {\n    console.error(e);\n    updateProgress(e.toString());\n  }\n}\n\ndocument.getElementById(\"read\").onclick = readFirmware;\ndocument.getElementById(\"verify\").onclick = verifyFirmware;\ndocument.getElementById(\"flash\").onclick = flashFirmware;\ndocument.getElementById(\n  \"revision\"\n).innerText = `Revision:${process.env.REVISION}`;\n"]}